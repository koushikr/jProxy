apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'jacoco'

repositories {
    maven{url 'http://repo1.maven.org/maven2'}
}

configurations {
    provided
    testCompile.extendsFrom provided
    compile.transitive = true
}

group = 'com.cosec.jproxy'
version = '0.0.1-SNAPSHOT'
description = 'JProxy'
sourceCompatibility=1.8

dependencies {
    compile 'com.googlecode.json-simple:json-simple:1.1',
            'org.projectlombok:lombok:1.14.4',
            'com.codahale.metrics:metrics-core:3.0.2',
            'com.google.inject:guice:3.0'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

sourceSets.main.compileClasspath += configurations.provided

mainClassName = 'com.cosec.jproxy.Joxy'

test {
//    testLogging.showStandardStreams = true
    useTestNG()
    outputs.upToDateWhen { false }
    afterTest { desc, result ->
        println "[TEST] ${desc.className} - ${desc.name} : ${result}"
    }
}

jar {
    manifest{
        attributes("Main-Class": mainClassName)
    }
}

import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
    }
}

apply plugin: 'shadow'

shadow {
    artifactAttached false
    transformer(ServiceFileTransformer)
    baseName = 'jproxy'
    classifier = 'shaded'
    exclude 'META-INF*//*.DSA'
    exclude 'META-INF*//*.RSA'
    exclude 'META-INF*//*.SF'
}

if(hasProperty("xlint")) {
    tasks.withType(Compile) {
        options.compilerArgs << "-Xlint:unchecked"
    }
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
}
